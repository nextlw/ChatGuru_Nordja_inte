/// Teste standalone para visualizar como o prompt √© montado e enviado para a LLM
/// Execute com: cargo run --bin test_prompt

use chatguru_clickup_middleware::services::ai_prompt_loader::AiPromptConfig;
use chatguru_clickup_middleware::services::openai_fallback::OpenAIService;
use chatguru_clickup_middleware::models::WebhookPayload;

#[tokio::main]
async fn main() {
    println!("\n{}", "=".repeat(80));
    println!("TESTE: Visualiza√ß√£o do Prompt Real Enviado √† LLM");
    println!("{}\n", "=".repeat(80));

    // 1. Carregar configura√ß√£o do prompt
    let config = match AiPromptConfig::load_default() {
        Ok(cfg) => cfg,
        Err(e) => {
            eprintln!("‚ùå Erro ao carregar configura√ß√£o: {}", e);
            return;
        }
    };

    println!("‚úÖ Configura√ß√£o carregada com sucesso\n");

    // 2. Simular uma mensagem real de usu√°rio
    let mensagem_usuario = "Preciso comprar presentes de anivers√°rio para minha m√£e";
    let nome_usuario = "Jo√£o Silva";
    let campanha = "WhatsApp";
    let origem = "whatsapp";

    // 3. Montar contexto como o sistema faz
    let context = format!(
        "Campanha: {}\nOrigem: {}\nNome: {}\nMensagem: {}\nTags: []",
        campanha, origem, nome_usuario, mensagem_usuario
    );

    println!("üìù CONTEXTO DA MENSAGEM:");
    println!("{}\n", context);
    println!("{}\n", "-".repeat(80));

    // 4. Gerar prompt completo (m√©todo est√°tico - sem campos din√¢micos)
    let prompt_completo = config.generate_prompt(&context);

    println!("ü§ñ PROMPT COMPLETO ENVIADO √Ä LLM:");
    println!("{}", "=".repeat(80));
    println!("{}", prompt_completo);
    println!("{}\n", "=".repeat(80));

    // 5. Estat√≠sticas do prompt
    let num_linhas = prompt_completo.lines().count();
    let num_chars = prompt_completo.len();
    let num_palavras = prompt_completo.split_whitespace().count();

    println!("üìä ESTAT√çSTICAS DO PROMPT:");
    println!("  ‚Ä¢ Linhas: {}", num_linhas);
    println!("  ‚Ä¢ Caracteres: {}", num_chars);
    println!("  ‚Ä¢ Palavras: {}", num_palavras);
    println!("  ‚Ä¢ Tamanho estimado (tokens): ~{}", num_palavras / 2);
    println!();

    // 6. Mostrar categorias dispon√≠veis
    println!("üìã CATEGORIAS CONFIGURADAS:");
    for cat in &config.categories {
        println!("  ‚Ä¢ {}", cat);
    }
    println!();

    // 7. Mostrar tipos de atividade
    println!("üè∑Ô∏è  TIPOS DE ATIVIDADE:");
    for at in &config.activity_types {
        println!("  ‚Ä¢ {}: {}", at.name, at.description);
    }
    println!();

    // 8. Mostrar status options
    println!("‚ö° STATUS BACK OFFICE:");
    for status in &config.status_options {
        println!("  ‚Ä¢ {}", status.name);
    }
    println!();

    println!("{}", "=".repeat(80));
    println!("‚úÖ Teste conclu√≠do! O prompt acima √© EXATAMENTE o que √© enviado √† LLM.");
    println!("{}\n", "=".repeat(80));

    // Verificar se OpenAI est√° configurada
    println!("\n{}", "=".repeat(80));
    println!("TESTE COM LLM REAL (OpenAI Fallback)");
    println!("{}\n", "=".repeat(80));

    let openai_service = OpenAIService::new(None).await;

    if openai_service.is_none() {
        println!("‚ö†Ô∏è  OpenAI n√£o configurada. Configure OPENAI_API_KEY para testar com LLM real.");
        println!("   Continuando apenas com visualiza√ß√£o do prompt...\n");
    } else {
        println!("‚úÖ OpenAI configurada! Vamos enviar prompts reais e ver as respostas.\n");
    }

    // Teste adicional com m√∫ltiplos cen√°rios
    println!("\n{}", "=".repeat(80));
    println!("TESTE ADICIONAL: M√∫ltiplos Cen√°rios");
    println!("{}\n", "=".repeat(80));

    let scenarios = vec![
        ("Preciso agendar uma consulta m√©dica para amanh√£", "Agendamento de consulta"),
        ("Comprar 2 kg de arroz e 1 litro de leite no mercado", "Compra de mercado"),
        ("Reservar voo para S√£o Paulo dia 15", "Viagem"),
        ("Pagar boleto da luz que vence hoje", "Pagamento financeiro"),
        ("Oi, tudo bem?", "Mensagem casual (n√£o √© atividade)"),
        ("Preciso enviar documentos via motoboy", "Log√≠stica"),
    ];

    for (i, (mensagem, descricao)) in scenarios.iter().enumerate() {
        println!("{}", "=".repeat(80));
        println!("CEN√ÅRIO {}: {}", i + 1, descricao);
        println!("{}\n", "=".repeat(80));

        let context = format!(
            "Campanha: WhatsApp\nOrigem: whatsapp\nNome: Usu√°rio Teste\nMensagem: {}\nTags: []",
            mensagem
        );

        let prompt = config.generate_prompt(&context);

        println!("üìù Mensagem: {}", mensagem);
        println!("ü§ñ Tamanho do prompt: {} caracteres", prompt.len());

        // Se OpenAI est√° configurada, enviar prompt real e mostrar resposta
        if let Some(ref openai) = openai_service {
            println!("\n‚è≥ Enviando para OpenAI...");

            match openai.classify_activity_fallback(&context).await {
                Ok(classification) => {
                    println!("‚úÖ RESPOSTA DA LLM:");
                    println!("{}", "-".repeat(80));
                    println!("üìä Classifica√ß√£o:");
                    println!("  ‚Ä¢ √â atividade: {}", if classification.is_activity { "‚úÖ SIM" } else { "‚ùå N√ÉO" });
                    println!("  ‚Ä¢ Raz√£o: {}", classification.reason);

                    if classification.is_activity {
                        if let Some(ref tipo) = classification.tipo_atividade {
                            println!("  ‚Ä¢ Tipo de Atividade: {}", tipo);
                        }
                        if let Some(ref cat) = classification.category {
                            println!("  ‚Ä¢ Categoria: {}", cat);
                        }
                        if let Some(ref subcat) = classification.sub_categoria {
                            println!("  ‚Ä¢ Subcategoria: {}", subcat);
                        }
                        if let Some(ref status) = classification.status_back_office {
                            println!("  ‚Ä¢ Status: {}", status);
                        }
                        if !classification.subtasks.is_empty() {
                            println!("  ‚Ä¢ Subtarefas:");
                            for (idx, subtask) in classification.subtasks.iter().enumerate() {
                                println!("    {}. {}", idx + 1, subtask);
                            }
                        }
                    }
                    println!("{}", "-".repeat(80));

                    // Mostrar como a tarefa ser√° montada para o ClickUp
                    if classification.is_activity {
                        println!("\nüì¶ MONTAGEM DA TAREFA PARA O CLICKUP:");
                        println!("{}", "-".repeat(80));

                        // Criar payload REAL como o ChatGuru envia
                        let mut campos_personalizados = std::collections::HashMap::new();
                        campos_personalizados.insert("Info_1".to_string(), serde_json::Value::String("Conta Teste".to_string()));
                        campos_personalizados.insert("Info_2".to_string(), serde_json::Value::String("Jo√£o Silva".to_string()));

                        let payload = WebhookPayload::ChatGuru(chatguru_clickup_middleware::models::ChatGuruPayload {
                            campanha_id: "901300373349".to_string(),
                            campanha_nome: "WhatsApp Bot".to_string(),
                            origem: "whatsapp".to_string(),
                            email: "joao.silva@email.com".to_string(),
                            nome: "Jo√£o Silva".to_string(),
                            tags: vec!["urgente".to_string()],
                            texto_mensagem: mensagem.to_string(),
                            media_url: None,
                            media_type: None,
                            campos_personalizados,
                            bot_context: Some(chatguru_clickup_middleware::models::BotContext {
                                chat_guru: Some(true),
                            }),
                            responsavel_nome: Some("Atendente Bot".to_string()),
                            responsavel_email: Some("bot@chatguru.app".to_string()),
                            link_chat: "https://s15.chatguru.app/chat/625584ce6fdcb7bda7d94aa8/12345".to_string(),
                            celular: "+5511987654321".to_string(),
                            phone_id: Some("5511987654321".to_string()),
                            chat_id: Some("12345".to_string()),
                            chat_created: Some("2025-10-02T10:30:00Z".to_string()),
                        });

                        // Converter classifica√ß√£o OpenAI para ActivityClassification
                        let ai_classification = chatguru_clickup_middleware::services::vertex_ai::ActivityClassification {
                            is_activity: classification.is_activity,
                            activity_type: classification.tipo_atividade.clone(),
                            category: classification.category.clone(),
                            subtasks: classification.subtasks.clone(),
                            priority: None,
                            reason: classification.reason.clone(),
                            cliente_solicitante_id: None,
                            tipo_atividade: classification.tipo_atividade.clone(),
                            sub_categoria: classification.sub_categoria.clone(),
                            status_back_office: classification.status_back_office.clone(),
                        };

                        // Gerar dados da tarefa como o middleware faz
                        let task_data = payload.to_clickup_task_data_with_ai(Some(&ai_classification));

                        println!("\nüì§ PAYLOAD ENVIADO PARA O CLICKUP:");
                        println!("{}", "=".repeat(80));
                        println!("{}", serde_json::to_string_pretty(&task_data).unwrap());
                        println!("{}", "=".repeat(80));

                        // Mostrar endpoint e detalhes da requisi√ß√£o
                        println!("\nüåê DETALHES DA REQUISI√á√ÉO HTTP:");
                        println!("{}", "-".repeat(80));
                        println!("M√©todo: POST");
                        println!("URL: https://api.clickup.com/api/v2/list/901300373349/task");
                        println!("\nHeaders:");
                        println!("  Authorization: <CLICKUP_API_TOKEN>");
                        println!("  Content-Type: application/json");
                        println!("\nBody: (JSON acima)");
                        println!("{}", "-".repeat(80));

                        // Explicar os campos
                        println!("\nüìã EXPLICA√á√ÉO DOS CAMPOS:");
                        println!("{}", "-".repeat(80));
                        if let Some(name) = task_data.get("name") {
                            println!("‚Ä¢ name: {} (T√≠tulo da tarefa no ClickUp)", name.as_str().unwrap_or(""));
                        }
                        if let Some(desc) = task_data.get("description") {
                            let desc_str = desc.as_str().unwrap_or("");
                            let preview = if desc_str.len() > 100 {
                                desc_str.chars().take(100).collect::<String>() + "..."
                            } else {
                                desc_str.to_string()
                            };
                            println!("‚Ä¢ description: {} (Descri√ß√£o completa com contexto)", preview);
                        }
                        if let Some(status) = task_data.get("status") {
                            println!("‚Ä¢ status: {} (Status inicial da tarefa)", status.as_str().unwrap_or(""));
                        }
                        if let Some(priority) = task_data.get("priority") {
                            println!("‚Ä¢ priority: {} (1=Urgente, 2=Alta, 3=Normal, 4=Baixa)", priority);
                        }
                        if let Some(custom_fields) = task_data.get("custom_fields").and_then(|v| v.as_array()) {
                            println!("‚Ä¢ custom_fields: {} campos personalizados mapeados", custom_fields.len());
                            for (idx, field) in custom_fields.iter().enumerate() {
                                if let (Some(id), Some(value)) = (field.get("id"), field.get("value")) {
                                    println!("  {}. Campo ID {}: {}", idx + 1,
                                        id.as_str().unwrap_or(""),
                                        value.as_str().unwrap_or(&value.to_string())
                                    );
                                }
                            }
                        }
                        println!("{}", "-".repeat(80));
                    }
                }
                Err(e) => {
                    println!("‚ùå ERRO ao chamar OpenAI: {}", e);
                    println!("{}", "-".repeat(80));
                }
            }

            // Pequena pausa entre requisi√ß√µes para n√£o sobrecarregar a API
            tokio::time::sleep(tokio::time::Duration::from_millis(500)).await;
        } else {
            // Apenas mostrar o prompt sem enviar
            let lines: Vec<&str> = prompt.lines().collect();
            if lines.len() > 15 {
                println!("\nüìÑ √öltimas 20 linhas do prompt:");
                println!("{}", "-".repeat(80));
                for line in lines.iter().skip(lines.len().saturating_sub(20)) {
                    println!("{}", line);
                }
                println!("{}", "-".repeat(80));
            }
        }
        println!();
    }

    println!("‚úÖ Teste de m√∫ltiplos cen√°rios conclu√≠do!\n");
}
