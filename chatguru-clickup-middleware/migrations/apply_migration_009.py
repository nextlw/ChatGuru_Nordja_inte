#!/usr/bin/env python3
"""
Aplicador da Migration 009: Corre√ß√£o FINAL da l√≥gica de mapeamento
Data: 2025-10-12

L√ìGICA FINAL CORRETA:
- responsavel_nome = Nome do atendente (determina o Space)
- Info_1 = Empresa cliente (apenas campo personalizado)  
- Info_2 = Nome do cliente pessoa (determina a Folder)

Este script aplica a Migration 009 que corrige definitivamente o mapeamento
invertido que foi criado na Migration 008.
"""

import os
import sys
import logging
from pathlib import Path
from google.cloud.sql.connector import Connector
import sqlalchemy
from sqlalchemy import text
import pg8000

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_connection():
    """Conecta ao Cloud SQL usando IAM authentication"""
    try:
        # Configura√ß√µes do Cloud SQL
        project_id = "buzzlightear"
        region = "southamerica-east1"
        instance_name = "chatguru-middleware-db"
        database_name = "chatguru_middleware"
        
        # Inicializar o conector
        connector = Connector()
        
        def getconn():
            conn = connector.connect(
                f"{project_id}:{region}:{instance_name}",
                "pg8000",
                user="postgres",
                db=database_name,
                enable_iam_auth=True,
            )
            return conn
        
        # Criar engine
        engine = sqlalchemy.create_engine(
            "postgresql+pg8000://",
            creator=getconn,
        )
        
        logger.info("‚úÖ Conex√£o com Cloud SQL estabelecida")
        return engine, connector
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar com Cloud SQL: {e}")
        raise

def apply_migration_009(engine):
    """Aplica a Migration 009"""
    try:
        # Ler arquivo da migra√ß√£o
        migration_file = Path(__file__).parent / "009_correct_mapping_logic.sql"
        
        if not migration_file.exists():
            raise FileNotFoundError(f"Arquivo de migra√ß√£o n√£o encontrado: {migration_file}")
        
        with open(migration_file, 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        logger.info("üìÇ Arquivo de migra√ß√£o 009 carregado")
        
        # Executar migra√ß√£o
        with engine.connect() as conn:
            # Executar em uma transa√ß√£o
            with conn.begin():
                logger.info("üöÄ Iniciando aplica√ß√£o da Migration 009...")
                
                # Dividir SQL em comandos individuais
                commands = [cmd.strip() for cmd in migration_sql.split(';') if cmd.strip()]
                
                for i, command in enumerate(commands, 1):
                    if command.strip():
                        try:
                            logger.info(f"üîÑ Executando comando {i}/{len(commands)}")
                            result = conn.execute(text(command))
                            
                            # Se for um SELECT, mostrar resultado
                            if command.strip().upper().startswith('SELECT'):
                                rows = result.fetchall()
                                for row in rows:
                                    logger.info(f"üìä {row}")
                                    
                        except Exception as e:
                            logger.error(f"‚ùå Erro no comando {i}: {e}")
                            logger.error(f"üíÄ Comando que falhou: {command[:200]}...")
                            raise
                
                logger.info("‚úÖ Migration 009 aplicada com sucesso!")
                
                # Verificar dados inseridos
                logger.info("üîç Verificando dados inseridos...")
                
                # Contar registros por atendente
                count_result = conn.execute(text("""
                    SELECT attendant_name, COUNT(*) as total_clientes
                    FROM folder_mapping 
                    WHERE is_active = true 
                    GROUP BY attendant_name 
                    ORDER BY attendant_name
                """))
                
                logger.info("üìä Resumo dos mapeamentos por atendente:")
                for row in count_result:
                    logger.info(f"   {row[0]}: {row[1]} clientes")
                
                # Verificar aliases
                alias_result = conn.execute(text("""
                    SELECT attendant_alias, attendant_full_name, space_id
                    FROM attendant_aliases 
                    WHERE is_active = true 
                    ORDER BY attendant_alias
                """))
                
                logger.info("üîó Aliases configurados:")
                for row in alias_result:
                    logger.info(f"   {row[0]} ‚Üí {row[1]} (Space: {row[2]})")
                
        logger.info("üéâ Migration 009 aplicada e verificada com sucesso!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao aplicar Migration 009: {e}")
        raise

def main():
    """Fun√ß√£o principal"""
    try:
        logger.info("üöÄ Iniciando aplica√ß√£o da Migration 009...")
        logger.info("üìã Corre√ß√£o FINAL: responsavel_nome‚ÜíSpace, Info_2‚ÜíFolder, Info_1‚ÜíCampo")
        
        # Conectar ao banco
        engine, connector = get_connection()
        
        try:
            # Aplicar migra√ß√£o
            apply_migration_009(engine)
            
        finally:
            # Fechar conex√µes
            engine.dispose()
            connector.close()
            logger.info("üîå Conex√µes fechadas")
            
        logger.info("‚úÖ Processo conclu√≠do com sucesso!")
        
    except Exception as e:
        logger.error(f"üí• Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()