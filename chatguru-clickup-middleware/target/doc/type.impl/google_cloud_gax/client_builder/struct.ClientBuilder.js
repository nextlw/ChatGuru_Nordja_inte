(function() {
    var type_impls = Object.fromEntries([["google_cloud_secretmanager_v1",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ClientBuilder%3CF,+Cr%3E\" class=\"impl\"><a href=\"#impl-ClientBuilder%3CF,+Cr%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;F, Cr&gt; ClientBuilder&lt;F, Cr&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.build\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">build</a>&lt;C&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;C, Error&gt;<div class=\"where\">where\n    F: ClientFactory&lt;Client = C, Credentials = Cr&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new client.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">let </span>client = Client::builder()\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_endpoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_endpoint</a>&lt;V&gt;(self, v: V) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Sets the endpoint.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">let </span>client = Client::builder()\n    .with_endpoint(<span class=\"string\">\"http://private.googleapis.com\"</span>)\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_tracing\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_tracing</a>(self) -&gt; ClientBuilder&lt;F, Cr&gt;</h4></section></summary><div class=\"docblock\"><p>Enables tracing.</p>\n<p>The client libraries can be dynamically instrumented with the Tokio\n<a href=\"https://docs.rs/tracing/latest/tracing/\">tracing</a> framework. Setting this flag enables this instrumentation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">let </span>client = Client::builder()\n    .with_tracing()\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_credentials\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_credentials</a>&lt;T&gt;(self, v: T) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Cr&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configure the authentication credentials.</p>\n<p>Most Google Cloud services require authentication, though some services\nallow for anonymous access, and some services provide emulators where\nno authentication is required. More information about valid credentials\ntypes can be found in the <a href=\"https://docs.rs/google-cloud-auth\">google-cloud-auth</a> crate documentation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n// Placeholder, normally use google_cloud_auth::credentials\n</span><span class=\"kw\">use </span>examples::credentials;\n<span class=\"kw\">let </span>client = Client::builder()\n    .with_credentials(\n        credentials::mds::Builder::new()\n            .scopes([<span class=\"string\">\"https://www.googleapis.com/auth/cloud-platform.read-only\"</span>])\n            .build())\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_retry_policy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_retry_policy</a>&lt;V&gt;(self, v: V) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RetryPolicyArg&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configure the retry policy.</p>\n<p>The client libraries can automatically retry operations that fail. The\nretry policy controls what errors are considered retryable, sets limits\non the number of attempts or the time trying to make attempts.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">use </span>gax::retry_policy::{AlwaysRetry, RetryPolicyExt};\n<span class=\"kw\">let </span>client = Client::builder()\n    .with_retry_policy(AlwaysRetry.with_attempt_limit(<span class=\"number\">3</span>))\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_backoff_policy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_backoff_policy</a>&lt;V&gt;(self, v: V) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;BackoffPolicyArg&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configure the retry backoff policy.</p>\n<p>The client libraries can automatically retry operations that fail. The\nbackoff policy controls how long to wait in between retry attempts.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">use </span>gax::exponential_backoff::ExponentialBackoff;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">let </span>policy = ExponentialBackoff::default();\n<span class=\"kw\">let </span>client = Client::builder()\n    .with_backoff_policy(policy)\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_retry_throttler\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_retry_throttler</a>&lt;V&gt;(self, v: V) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RetryThrottlerArg&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configure the retry throttler.</p>\n<p>Advanced applications may want to configure a retry throttler to\n[Address Cascading Failures] and when <a href=\"https://sre.google/sre-book/handling-overload/\">Handling Overload</a> conditions.\nThe client libraries throttle their retry loop, using a policy to\ncontrol the throttling algorithm. Use this method to fine tune or\ncustomize the default retry throtler.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">use </span>gax::retry_throttler::AdaptiveThrottler;\n<span class=\"kw\">let </span>client = Client::builder()\n    .with_retry_throttler(AdaptiveThrottler::default())\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_polling_error_policy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_polling_error_policy</a>&lt;V&gt;(self, v: V) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;PollingErrorPolicyArg&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configure the polling error policy.</p>\n<p>Some clients support long-running operations, the client libraries can\nautomatically poll these operations until they complete. Polling may\nfail due to transient errors and applications may want to continue the\npolling loop despite such errors. The polling error policy controls\nwhich errors are treated as recoverable, and may limit the number\nof attempts and/or the total time polling the operation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">use </span>gax::polling_error_policy::Aip194Strict;\n<span class=\"kw\">use </span>gax::polling_error_policy::PollingErrorPolicyExt;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">let </span>client = Client::builder()\n    .with_polling_error_policy(Aip194Strict\n        .with_time_limit(Duration::from_secs(<span class=\"number\">15 </span>* <span class=\"number\">60</span>))\n        .with_attempt_limit(<span class=\"number\">50</span>))\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_polling_backoff_policy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_polling_backoff_policy</a>&lt;V&gt;(self, v: V) -&gt; ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;PollingBackoffPolicyArg&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configure the polling backoff policy.</p>\n<p>Some clients support long-running operations, the client libraries can\nautomatically poll these operations until they complete. The polling\nbackoff policy controls how long the client waits between polling\nattempts.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>examples::Client; <span class=\"comment\">// Placeholder for examples\n</span><span class=\"kw\">use </span>gax::exponential_backoff::ExponentialBackoff;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">let </span>policy = ExponentialBackoff::default();\n<span class=\"kw\">let </span>client = Client::builder()\n    .with_polling_backoff_policy(policy)\n    .build().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"google_cloud_secretmanager_v1::builder::secret_manager_service::ClientBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ClientBuilder%3CF,+Cr%3E\" class=\"impl\"><a href=\"#impl-Clone-for-ClientBuilder%3CF,+Cr%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;F, Cr&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Cr: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; ClientBuilder&lt;F, Cr&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","google_cloud_secretmanager_v1::builder::secret_manager_service::ClientBuilder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ClientBuilder%3CF,+Cr%3E\" class=\"impl\"><a href=\"#impl-Debug-for-ClientBuilder%3CF,+Cr%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;F, Cr&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for ClientBuilder&lt;F, Cr&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    Cr: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","google_cloud_secretmanager_v1::builder::secret_manager_service::ClientBuilder"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16060]}