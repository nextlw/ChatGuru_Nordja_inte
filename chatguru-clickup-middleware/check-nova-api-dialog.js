const fetch = require('node-fetch');

const API_KEY = 'c5be7758-d3e2-4f07-b039-7e0bdd1e0d7f';
const headers = {
  'APIKey': API_KEY,
  'Content-Type': 'application/json'
};

async function checkDialogs() {
  try {
    console.log('üîç Buscando todos os di√°logos...');
    console.log('');
    
    // Buscar todos os di√°logos
    const dialogsUrl = 'https://s12.chatguru.app/api/v1/dialogs';
    const dialogsResponse = await fetch(dialogsUrl, { headers });
    
    if (!dialogsResponse.ok) {
      console.log('‚ùå Erro ao buscar di√°logos:', dialogsResponse.status, dialogsResponse.statusText);
      return;
    }
    
    const dialogs = await dialogsResponse.json();
    
    console.log('üìä Total de di√°logos encontrados:', dialogs.length);
    console.log('');
    
    // Listar todos os di√°logos
    console.log('üìã Lista de Di√°logos:');
    console.log('‚îÄ'.repeat(60));
    dialogs.forEach((dialog, index) => {
      console.log(`${index + 1}. ${dialog.name || 'Sem nome'}`);
      console.log(`   ID: ${dialog.id}`);
      console.log(`   Status: ${dialog.active ? '‚úÖ Ativo' : '‚ùå Inativo'}`);
      console.log(`   Descri√ß√£o: ${dialog.description || 'Sem descri√ß√£o'}`);
      console.log('');
    });
    
    // Procurar especificamente pelo nova_api
    const novaApiVariations = ['nova_api', 'Nova API', 'nova_API', 'NOVA_API'];
    let novaApi = null;
    
    for (const variation of novaApiVariations) {
      novaApi = dialogs.find(d => 
        d.name === variation || 
        (d.description && d.description.includes(variation))
      );
      if (novaApi) break;
    }
    
    if (!novaApi) {
      console.log('‚îÄ'.repeat(60));
      console.log('‚ö†Ô∏è  DI√ÅLOGO "nova_api" N√ÉO ENCONTRADO!');
      console.log('');
      console.log('Poss√≠veis raz√µes:');
      console.log('1. O di√°logo ainda n√£o foi criado');
      console.log('2. O di√°logo tem outro nome');
      console.log('3. O di√°logo est√° em outro workspace');
      
      // Procurar di√°logos que possam ser relacionados
      const possibleDialogs = dialogs.filter(d => 
        d.name && (
          d.name.toLowerCase().includes('api') ||
          d.name.toLowerCase().includes('nova') ||
          d.name.toLowerCase().includes('clickup') ||
          d.name.toLowerCase().includes('task')
        )
      );
      
      if (possibleDialogs.length > 0) {
        console.log('');
        console.log('üîé Di√°logos que podem estar relacionados:');
        possibleDialogs.forEach(d => {
          console.log(`   - ${d.name} (ID: ${d.id})`);
        });
      }
      
      return;
    }
    
    console.log('‚îÄ'.repeat(60));
    console.log('‚úÖ DI√ÅLOGO "nova_api" ENCONTRADO!');
    console.log('');
    console.log('üìå Detalhes do Di√°logo:');
    console.log(`   Nome: ${novaApi.name}`);
    console.log(`   ID: ${novaApi.id}`);
    console.log(`   Status: ${novaApi.active ? '‚úÖ Ativo' : '‚ùå Inativo'}`);
    console.log(`   Descri√ß√£o: ${novaApi.description || 'Sem descri√ß√£o'}`);
    
    // Buscar detalhes completos
    const detailsUrl = `https://s12.chatguru.app/api/v1/dialogs/${novaApi.id}`;
    const detailsResponse = await fetch(detailsUrl, { headers });
    
    if (detailsResponse.ok) {
      const details = await detailsResponse.json();
      
      // Verificar webhook
      console.log('');
      console.log('üîó Configura√ß√£o de Webhook:');
      const webhookUrl = details.webhookUrl || details.webhook || details.url || null;
      
      if (webhookUrl) {
        console.log(`   URL Atual: ${webhookUrl}`);
        
        if (webhookUrl.includes('buzzlightear')) {
          console.log('   ‚ö†Ô∏è  ATEN√á√ÉO: Webhook est√° apontando para buzzlightear!');
          console.log('   üìù Precisa atualizar para o novo servi√ßo Cloud Run');
        } else if (webhookUrl.includes('chatguru-clickup-middleware')) {
          console.log('   ‚úÖ Webhook j√° est√° configurado para o novo servi√ßo!');
        } else {
          console.log('   ‚ÑπÔ∏è  Webhook configurado para outro servi√ßo');
        }
      } else {
        console.log('   ‚ùå WEBHOOK N√ÉO CONFIGURADO!');
        console.log('   üìù √â necess√°rio configurar o webhook para receber eventos');
      }
      
      // Verificar actions
      if (details.actions && details.actions.length > 0) {
        console.log('');
        console.log('üéØ A√ß√µes Configuradas:');
        details.actions.forEach((action, i) => {
          console.log(`   ${i + 1}. ${action.name || action.type || 'A√ß√£o'}`);
          if (action.webhook) {
            console.log(`      Webhook: ${action.webhook}`);
          }
        });
      }
      
      // Verificar annotations
      if (details.annotations && details.annotations.length > 0) {
        console.log('');
        console.log('üìù Anota√ß√µes Configuradas:');
        details.annotations.forEach((ann, i) => {
          console.log(`   ${i + 1}. ${ann.name || ann.key || 'Anota√ß√£o'}`);
        });
      }
    }
    
    console.log('');
    console.log('‚ïê'.repeat(60));
    console.log('üìå RESUMO E PR√ìXIMOS PASSOS:');
    console.log('‚ïê'.repeat(60));
    
    if (novaApi) {
      console.log('');
      console.log('‚úÖ Di√°logo nova_api existe');
      console.log(`   Status: ${novaApi.active ? 'Ativo' : 'Inativo (precisa ativar)'}`);
      
      const webhookUrl = novaApi.webhookUrl || novaApi.webhook || novaApi.url || null;
      if (webhookUrl) {
        if (webhookUrl.includes('buzzlightear')) {
          console.log('');
          console.log('‚ö†Ô∏è  Webhook est√° apontando para o servi√ßo antigo (buzzlightear)');
          console.log('');
          console.log('üìù A√á√ïES NECESS√ÅRIAS:');
          console.log('   1. Aguardar o deploy do Cloud Run terminar');
          console.log('   2. Obter a URL do novo servi√ßo');
          console.log('   3. Atualizar o webhook do di√°logo nova_api');
          console.log('   4. Testar com uma mensagem no WhatsApp');
        } else if (webhookUrl.includes('chatguru-clickup-middleware')) {
          console.log('');
          console.log('‚úÖ Webhook j√° est√° configurado corretamente!');
          console.log('');
          console.log('üìù PR√ìXIMO PASSO:');
          console.log('   - Testar enviando uma mensagem no WhatsApp');
        }
      } else {
        console.log('');
        console.log('‚ùå Webhook N√ÉO est√° configurado');
        console.log('');
        console.log('üìù A√á√ïES NECESS√ÅRIAS:');
        console.log('   1. Aguardar o deploy do Cloud Run terminar');
        console.log('   2. Obter a URL do novo servi√ßo');
        console.log('   3. Configurar o webhook no di√°logo nova_api');
        console.log('   4. Testar com uma mensagem no WhatsApp');
      }
    } else {
      console.log('');
      console.log('‚ùå Di√°logo nova_api N√ÉO existe');
      console.log('');
      console.log('üìù A√á√ïES NECESS√ÅRIAS:');
      console.log('   1. Criar o di√°logo nova_api no ChatGuru');
      console.log('   2. Configurar as anota√ß√µes necess√°rias');
      console.log('   3. Aguardar o deploy do Cloud Run terminar');
      console.log('   4. Configurar o webhook com a URL do novo servi√ßo');
      console.log('   5. Testar com uma mensagem no WhatsApp');
    }
    
    console.log('');
    console.log('‚ïê'.repeat(60));
    
  } catch (error) {
    console.error('‚ùå Erro ao executar verifica√ß√£o:', error.message);
    if (error.stack) {
      console.error('Stack:', error.stack);
    }
  }
}

// Executar a verifica√ß√£o
console.log('üöÄ Iniciando verifica√ß√£o do di√°logo nova_api...');
console.log('');
checkDialogs().then(() => {
  console.log('');
  console.log('‚ú® Verifica√ß√£o conclu√≠da!');
}).catch(error => {
  console.log('');
  console.error('‚ùå Erro fatal:', error);
});